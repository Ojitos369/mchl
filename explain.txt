                Ent1            Ent2
oculta1         -0.00572711,    0.0105376
oculta2         0.00162986,     0.0011553


E1      0, 0, 1, 1
E2      0, 1, 0, 1

* Suma todo lo que recibe multiplicado por el peso
* peso de ent1 a oculta1
* Producto punto de los pesos por las entradas
* Pesos 2x2 (2 filas [ocultas], 2 columnas [entradas])
* Entradas 2x4 (2 filas [entradas], 4 columnas [muetreos]
)
Oculta 1
0, 0, -0.00572711, -0.00572711
0, 0.0105376, 0, 0.0105376
0+0, 0+0.0105376, -0.00572711+0, -0.00572711+0.0105376
[0, 0.0105376, -0.00572711, 0.00481049] + seg(0)
Oculta 2
0, 0, 0.00162986, 0.00162986
0, 0.0011553, 0, 0.0011553
0+0, 0+0.0011553, 0.00162986+0, 0.00162986+0.0011553
[0, 0.0011553, 0.00162986, 0.00278516]

-0.00572711,    0.0105376       0,  0,  1,  1
0.00162986,     0.0011553       0,  1,  0,  1

-0.00572711*0 + 0.0105376*0     -0.00572711*0 + 0.0105376*1     -0.00572711*1 + 0.0105376*0     -0.00572711*1 + 0.0105376*1
0.00162986*0 + 0.0011553*0     0.00162986*0 + 0.0011553*1     0.00162986*1 + 0.0011553*0     0.00162986*1 + 0.0011553*1

0     0.0105376     -0.00572711     0.00481049
0.00162986*0 + 0.0011553*0     0.00162986*0 + 0.0011553*1     0.00162986*1 + 0.0011553*0     0.00162986*1 + 0.0011553*1


0.        ,  0.0105376 , -0.00572711,  0.00481049
0.        ,  0.0011553 ,  0.00162986,  0.00278516

# Pasando por la sigmoide (Actt1)
0.5       , 0.50263438, 0.49856823, 0.50120262
0.5       , 0.50028883, 0.50040746, 0.50069629


-0.00153322,  0.0034023

0.5       , 0.50263438, 0.49856823, 0.50120262
0.5       , 0.50028883, 0.50040746, 0.50069629

0.00093454, 0.00093148, 0.00093812, 0.00093506
Pasamos por sigmoide
Y_pred
0.50023363, 0.50023287, 0.50023453, 0.50023377

Calculamos la perdida
Y = [0, 1, 1, 0]
Y_pred = [0.50023363, 0.50023287, 0.50023453, 0.50023377]
m = Y.shape[1] (columnas) (1x4) -> 4
eps = 1e-8  # evitar log(0)
perdida = -(1 / m) * np.sum(Y * np.log(Y_pred + eps) + (1 - Y) * np.log(1 - Y_pred + eps))
perdidad = 0.693147269788495

Backpropagation
0.50023363, 0.50023287, 0.50023453, 0.50023377
-
0, 1, 1, 0

0.50023363, -0.49976713, -0.49976547, 0.50023377
0.50023363, -0.49976713, -0.49976547, 0.50023377

Producto Punto (salida, lo que se espera) dS2
0.50023363, -0.49976713, -0.49976547, 0.50023377
dS2 = 0.50023363, -0.49976713, -0.49976547, 0.50023377

CS 
0.5, 0.50263438, 0.49856823, 0.50120262
0.5, 0.50028883, 0.50040746, 0.50069629

CS Traspuesta
0.5, 0.5
0.50263438, 0.50028883
0.49856823, 0.50040746
0.50120262, 0.50069629


0.50023363, -0.49976713, -0.49976547, 0.50023377
1 x 4 * 4 x 2

0.50023363, -0.49976713, -0.49976547, 0.50023377

0.5, 0.5
0.50263438, 0.50028883
0.49856823, 0.50040746
0.50120262, 0.50069629

0.50023363*0.5 + -0.49976713*0.50263438 + -0.49976547*0.49856823 + 0.50023377*0.50120262,   0.50023363*0.5 + -0.49976713*0.50028883 + -0.49976547*0.50040746 + 0.50023377*0.50069629
0.250116815 + -0.25120014153192943 + -0.2491671857930181 + 0.2507184761364774,      0.250116815 + -0.2500279127401579 + -0.25008636943840623 + 0.2504651927717133
0.000467963811529859,   0.00046772559314917084


(1/m) * [0.000467963811529859,   0.00046772559314917084]
[0.00011699095288246475,   0.00011693139828729271]
[0.0001169, 0.00011693]
dPesos2 = (1 / m) * np.dot(dS2, self.act1.T)
0.00011699, 0.00011693

0.50023363, -0.49976713, -0.49976547, 0.50023377
dSesgo2 = (1 / m) * np.sum(dS2, axis=1, keepdims=True)
1/4 * [0.50023363 + -0.49976713 + -0.49976547 + 0.50023377]
1/4 * [0.0009348000000000134]
0.0002337
dSesgo2 = 0.0002337

dAct1 = np.dot(self.pesos2.T, dS2)
2x1 * 1x4 = 2x4
pesos2
-0.00153322, 0.0034023
pesos2.T
-0.00153322
0.0034023
dS2 = 0.50023363, -0.49976713, -0.49976547, 0.50023377

-0.00153322*0.50023363 + -0.00153322*-0.49976713 + -0.00153322*-0.49976547 + -0.00153322*0.50023377
0.0034023*0.50023363 + 0.0034023*-0.49976713 + 0.0034023*-0.49976547 + 0.0034023*0.50023377

-0.0007669682061886, 0.0007662529590586, 0.0007662504139134, -0.0007669684208394
0.001701944879349, -0.001700357706399, -0.0017003520585809999, 0.001701945355671
dAct1
-0.00076697,  0.00076625,  0.00076625, -0.00076697
0.00170194, -0.00170036, -0.00170035,  0.00170195

dS1 = dAct1 * derivada_sigmoide(self.act1)
(producto directo de dAct1 y la derivada de la sigmoide)
derivada_sigmoide(self.act1)
0.5, 0.50263438, 0.49856823, 0.50120262
0.5, 0.50028883, 0.50040746, 0.50069629

dS1
-0.00019174,  0.00019156,  0.00019156, -0.00019174
0.00042549, -0.00042509, -0.00042509,  0.00042549

dPesos1 = (1 / m) * np.dot(dS1, X.T)
dS1 2x4
x 2x4
X.T 4x2
dPesos1 2x2
dPesos1
-4.49905071e-08, -4.57682243e-08
9.94444089e-08,  9.90564137e-08

dSesgo1 = (1 / m) * np.sum(dS1, axis=1, keepdims=True)
dSesgo1
-9.10234682e-08
1.98679192e-07

self.pesos2 -= self.tasa * dPesos2
self.sesgo2 -= self.tasa * dSesgo2
self.pesos1 -= self.tasa * dPesos1
self.sesgo1 -= self.tasa * dSesgo1

